input {
  file {
    path => "/var/log/logtj/*/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => [ 'onec' ]
    codec =>   multiline {
      pattern => "^[0-5][0-9]:([0-5]?[0-9]|60).[0-9]{6}"
      negate => 'true'
      what => 'previous'
    }  
  }
}

filter {

         if "onec" in [tags] {
                 grok {
                         patterns_dir => ["/usr/share/logstash/pipeline/patterns"]
                         match => { "message" => "%{TIME:MoH}[0-9]{3}-%{DURATION:duration_msec:int},%{TYPE:event},%{NESTING:nesting_level:int}" }
                         match => { "message" => ",process=%{PROCESS:process}" }
                         match => { "message" => "p:processName=%{PPROCESSNAME:pprocessname}," }
                         match => { "message" => "t:applicationName=%{WORD:application},"}
                         match => { "message" => "t:clientID=%{WORD:clientid},"}
                         match => { "message" => "Usr=%{USERNAME:username},"}
                         match => { "message" => "DataBase=%{USERNAME:infobase},"}
                         match => { "message" => "OSThread=%{WORD:osthread},"}
                         match => { "message" => "SessionID=%{WORD:sessionid},"}
                         match => { "message" => "Regions=%{REGION:region},"}
                         match => { "message" => "Locks=[\"\']%{INSIDEQUOTES:locks}[\"\'],"}
                         match => { "message" => "WaitConnections=%{WORD:waitconnections},"}
                         match => { "message" => "Context=[\"\']%{INSIDEQUOTES:context}[\"\']"}
                         match => { "message" => "Descr=[\"\']%{INSIDEQUOTES:description}[\"\']"}
                         match => { "message" => "Sdbl=[\"\']%{INSIDEQUOTES:sdbl}[\"\']"}
                         match => { "path" => ".*%{DaHFILE:DaH}\.log"}
                         break_on_match => false
                 }
                 mutate {
                         add_field => { "MyTime" => "%{DaH}%{MoH}" }
                 }
                 date {
                         match => ["MyTime", "yyMMddHHmm:ss.SSS"]
                         target => "@timestamp"
                 }
                 ruby {
                        code => "
                        event.set('duration_sec', if event.get('duration_msec').to_i > 0 then event.get('duration_msec').to_i / 1000 else 0 end)
                        event.set('duration_minutes', if event.get('duration_msec').to_i > 0 then event.get('duration_msec').to_i / 60000 else 0 end)
                        "

                        }
         }}

output {
  if "onec" in [tags] {
    elasticsearch {
      hosts => ["http://es:9200"]
      index => "onec-%{+YYYY.MM.dd}"
    }
    stdout {
      codec => rubydebug
    }
  }
}